(define (isqrt n0) 
  (let ((x0 (/ n0 2)) 
        (x1 (/ (+ x0 (/ n0 x0)) 2))) 
       (while (< x1 x0) 
           (set! x0 x1) 
           (set! x1 (/ (+ x0 (/ n0 x0)) 2))
        )
    x0)
)

(define (isprime n) 
    (if (< n 2) 
       #f 
       (if (== n 2) 
           #t 
           (if (== (% n 2) 0) 
               #f 
               (let ((s (isqrt n)) 
                     (d 3) 
                     (b #t)) 
                    (while (and (<= d s) b) 
                        (if (== (% n d) 0) 
                            (set! b #f) 
                            (set! d (+ d 2)))) 
                b)
           )
        ) 
    )
)

(define (primes m) 
    (let ((m0 2) 
        (pr '())) 
        (while (<= m0 m) 
            (if (isprime m0) 
                (set! pr (append pr m0)))
            (set! m0 (+ m0 1))) 
    pr )
)
