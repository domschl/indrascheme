(define (isqrt n0) 
  (let ((x0 (/ n0 2)) 
        (x1 (/ (+ x0 (/ n0 x0)) 2))) 
       (while (< x1 x0) 
           (set! x0 x1) 
           (set! x1 (/ (+ x0 (/ n0 x0)) 2))
        )
    x0)
)

(define (isprime n) 
    (if (< n 2) 
       #f 
       (if (== n 2) 
           #t 
           (if (== (% n 2) 0) 
               #f 
               (let ((s (isqrt n)) 
                     (d 3) 
                     (b #t)) 
                    (while (and (<= d s) b) 
                        (if (== (% n d) 0) 
                            (set! b #f) 
                            (set! d (+ d 2)))) 
                b)
           )
        ) 
    )
)

(define (primes m) 
    (let ((m0 2) 
        (pr '())) 
        (while (<= m0 m) 
            (if (isprime m0) 
                (set! pr (append pr m0)))
            (set! m0 (+ m0 1))) 
    pr )
)

(define err_count 0)

; There are 25 primes in [2..100]:
(if (== (length (primes 100)) 25) 
    (print "100 first primes, OK\n") 
    (begin 
        (print "Failure calculating 100 first primes\n") 
        (define err_count (+ err_count 1))
    )
)

; Factorial (recursion)
(define (factorial n) 
    (if (== n 0) 
        1 
        (* n (factorial (- n 1)))))

(if (== (factorial 4) 24) 
    (print "Factorial test OK\n")
    (begin 
        (print "Failure calculating Factorial\n") 
        (define err_count (+ err_count 1))
    )
)

; errors

(if (== (type (/ 1 0)) 'Error)
    (print "Type-test Error OK\n")
    (begin 
        (print "Failure on Type-test Error\n") 
        (define err_count (+ err_count 1))
    )
)

; types
(if (== (convtype "1" 'Int) 1)
    (print "Convtype OK\n")
    (begin 
        (print "Failure on convtype str->int Error\n") 
        (define err_count (+ err_count 1))
    )
)

; Lists
(let ((r (range 4)) (sum 0))
    (every 
        (lambda (x) (set! sum (+ sum x)))
        r
    )
    (if (== sum 6)
        (print "Range-sum test OK\n")
        (begin 
            (print "Failure calculating Range-sum " sum 6 "\n") 
            (define err_count (+ err_count 1))
        )
    )
)

(if (== (car (cdr (cdr (cdr (list 'a 'b 'c 'd 'e))))) 'd)
    (print "car-cdr test OK\n")
    (begin 
        (print "Failure on car-cdr\n")
        (print (car (cdr (cdr (cdr (list 'a 'b 'c 'd 'e))))) 'd)
        (define err_count (+ err_count 1))
    )
)

(let ((t '(a b c)))
    (if (and 
            (== (stringify (cons (car t) (cdr t))) "(a b c)")
            #t
            ;(== (length (stringify (cons (car t) (cdr t)))) (length t))
        )   
        (print "stringify-cons-car-cdr test OK\n")
        (begin 
            (print "Failure on stringify-cons-car-cdr\n")
            (print (stringify (cons (car t) (cdr t))))
            (define err_count (+ err_count 1))
        )
    )
)

(let ((t '(a b c d)) (tok 'c))
    (let ((ind (find t tok)) (res (index t ind)))
        (if (== tok res)
            (print "find-index test OK\n")
            (begin 
                (print "Failure on find-index\n")
                (print res "<->" tok)
                (define err_count (+ err_count 1))
            )
        )
    )
)

; String stuff
(let ((s "Hello, world!") (tok "world"))
    (if (== (substring s (find s tok)) "world!")
        (print "substring test 1 OK\n")
        (begin 
            (print "Failure on substring test 1\n")
            (define err_count (+ err_count 1))
        )
    )
    (if (== (substring s 1 2) "el")
        (print "substring test 2 OK\n")
        (begin 
            (print "Failure on substring test 2\n")
            (define err_count (+ err_count 1))
        )
    )
)

(if (== (+ "Hello," " world!") "Hello, world!")
    (print "string test add OK\n")
    (begin
        (print "Failure on string test add\n")
        (define err_count (+ err_count 1))
    )
)

(define (join stringlist)
    (let ((js ""))
        (every (lambda (x) (set! js (+ js x))) stringlist)
        js
    )
)

(let ((test "Hello, world!"))
    (if (== test (join (splitstring test)))
        (print "string split-join OK\n")
        (begin
            (print "Failure on string split-join: " test "->" (join (splitstring test))  "\n")
            (define err_count (+ err_count 1))
        )
    )
)

(if (== (join '("a" "b")) "ab")
    (print "string join manual list OK\n")
    (begin
        (print "Failure on string join manual list\n")
        (define err_count (+ err_count 1))
    )
)

; Lambda stuff
(if (== ((lambda (x) (+ x 7)) 8) 15) 
    (print "Lambda var1 OK\n") 
    (begin 
        (print "Lambda var1 ERROR\n")
        (define err_count (+ err_count 1))
    )
)

(if (== ((lambda (x y) (+ x y 7)) 8 9) 24) 
    (print "Lambda var2 OK\n") 
    (begin 
        (print "Lambda var2 ERROR\n")
        (define err_count (+ err_count 1))
    )
)

(if (== ((lambda (x y) (x y 7 8)) '+ 9) 24) 
    (print "Lambda op-var var1 OK\n") 
    (begin 
        (print "Lambda op-var var1 ERROR\n")
        (define err_count (+ err_count 1))
    )
)

(let ((n 1) (m 2) (t 0)) 
    (while (< n 5) 
        (set! n (+ n 1)) 
        (if (== n m) 
            (set! t (+ t 1))
        )
    )
    (if (== t 1) 
        (print "While OK\n")
        (begin 
            (print "While ERROR\n")
            (define err_count (+ err_count 1))
        )
    )
)

(let ((l1 '(1 2 3)) (l2 '(3 4 5)))
    (let ((sum 0))
        (every (lambda (x) (set! sum (+ sum x)))
            (map * l1 l2)
        )
        (if (== sum 26) 
            (print "Lambda mapper OK\n")
            (begin 
                (print "Lambda mapper failed: sum=" sum "\n")
                (define err_count (+ err_count 1))
            )
        )
    )
)

(if (> err_count 0) 
    (print "Self-test failed with " err_count " errors") 
    (print "Self-test ok!"))
